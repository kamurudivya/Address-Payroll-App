{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport logo from '../../Assets/images/logo.png';\nimport cancelButton from '../../Assets/images/cross.png';\nimport './Adduser.css';\nimport axios from 'axios';\nimport { useHistory } from \"react-router-dom\";\nimport { Link } from 'react-router-dom'; // import { FullName, Zipcode, PhoneNumber } from './Regex';\n\nconst AddUser = () => {\n  _s();\n\n  let history = useHistory();\n  const [user, setUser] = useState({\n    name: '',\n    FullName: '',\n    Zipcode: '',\n    PhoneNumber: '',\n    address: '',\n    city: '',\n    state: '',\n    zipcode: '',\n    phonenumber: '',\n    id: '',\n    isUpdate: false,\n    error: {\n      FullName: '',\n      Zipcode: '',\n      PhoneNumber: '',\n      address: '',\n      city: '',\n      state: '',\n      zipcode: '',\n      phonenumber: ''\n    }\n  });\n\n  function validateInputs() {\n    const name = document.querySelector('#name');\n    const phone = document.querySelector('#phone');\n    const address = document.querySelector('#address');\n    const nameError = document.querySelector('.error-name');\n    const phoneError = document.querySelector('.error-phone');\n    const addressError = document.querySelector('.error-address');\n    name.addEventListener('input', function () {\n      try {\n        let personData = new AddressBook();\n        personData.name = name.value;\n        nameError.textContent = \"\";\n      } catch (e) {\n        nameError.textContent = e;\n      }\n    });\n    phone.addEventListener('input', function () {\n      try {\n        let personData = new AddressBook();\n        personData.phone = phone.value;\n        phoneError.textContent = \"\";\n      } catch (e) {\n        phoneError.textContent = e;\n      }\n    });\n    address.addEventListener('input', function () {\n      try {\n        let personData = new AddressBook();\n        personData.address = address.value;\n        addressError.textContent = \"\";\n      } catch (e) {\n        addressError.textContent = e;\n      }\n    });\n  } //Save\n\n\n  const save = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    let addressBook = createAddressBook(); //alert(JSON.stringify(addressBook));\n\n    addAndUpdateLocalStorage(addressBook); //Data store in local storage\n\n    alert(\"You are added successfully \" + addressBook._name);\n    window.location.replace(site_properties.home);\n  };\n\n  const createAddressBook = () => {\n    let addressBook = new AddressBook();\n    addressBook.name = getInputValueId(\"#name\");\n    addressBook.phone = getInputValueId(\"#phone\");\n    addressBook.address = getInputValueId(\"#address\");\n    addressBook.city = getInputValueId(\"#city\");\n    addressBook.state = getInputValueId(\"#state\");\n    addressBook.zipcode = getInputValueId(\"#zipcode\"); //addressBook.id = new Date().getTime() + 1;\n\n    addressBook.id = addressBookObject._id;\n    return addressBook;\n  };\n\n  const getInputValueId = id => {\n    return document.querySelector(id).value;\n  }; //Create a new person id\n\n\n  const createNewPersonId = () => {\n    let personId = localStorage.getItem('personId');\n    personId = !personId ? 1 : (parseInt(personId) + 1).toString();\n    localStorage.setItem('personId', personId);\n    return personId;\n  }; //Data store in local storage\n\n\n  const addAndUpdateLocalStorage = data => {\n    let personList = JSON.parse(localStorage.getItem(\"AddressBookList\"));\n\n    if (personList) {\n      let existingPersonData = personList.find(personData => personData._id == data.id);\n\n      if (!existingPersonData) {\n        data.id = createNewPersonId();\n        personList.push(data);\n      } else {\n        const index = personList.map(person => person._id).indexOf(data.id); //Get index of that array using map andindexOf\n\n        personList.splice(index, 1, data); //Remove person from the list\n      }\n    } else {\n      data.id = createNewPersonId();\n      personList = [data];\n    }\n\n    localStorage.setItem('AddressBookList', JSON.stringify(personList));\n  }; //Data shows in form form local storage for updating data\n\n\n  const editForm = () => {\n    let jsonData = localStorage.getItem('edit-person');\n    isUpdate = jsonData ? true : false;\n    if (!isUpdate) return;\n    addressBookObject = JSON.parse(jsonData);\n    setForm();\n  };\n\n  const setForm = () => {\n    setValue('#name', addressBookObject._name);\n    setValue('#phone', addressBookObject._phone);\n    setValue('#address', addressBookObject._address);\n    setValue('#city', addressBookObject._city);\n    setValue('#state', addressBookObject._state);\n    setValue('#zipcode', addressBookObject._zipcode);\n  };\n\n  const setValue = (id, value) => {\n    let element = document.querySelector(id);\n    element.value = value;\n  }; //Reset\n\n\n  const reset = () => {\n    alert(\"Reset\");\n  }; //Cancel\n\n\n  const cancel = () => {\n    window.location.replace(site_properties.home);\n  };\n};\n\n_s(AddUser, \"p8QeEM5UYNtIYlJrqw/j45i2gaY=\", false, function () {\n  return [useHistory];\n});\n\n_c = AddUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddUser\");","map":{"version":3,"sources":["C:/Users/Me/Desktop/reactjs/AddressBookAppliacation-master/AddressBookApp/src/components/users/Adduser.jsx"],"names":["React","useState","logo","cancelButton","axios","useHistory","Link","AddUser","history","user","setUser","name","FullName","Zipcode","PhoneNumber","address","city","state","zipcode","phonenumber","id","isUpdate","error","validateInputs","document","querySelector","phone","nameError","phoneError","addressError","addEventListener","personData","AddressBook","value","textContent","e","save","event","preventDefault","stopPropagation","addressBook","createAddressBook","addAndUpdateLocalStorage","alert","_name","window","location","replace","site_properties","home","getInputValueId","addressBookObject","_id","createNewPersonId","personId","localStorage","getItem","parseInt","toString","setItem","data","personList","JSON","parse","existingPersonData","find","push","index","map","person","indexOf","splice","stringify","editForm","jsonData","setForm","setValue","_phone","_address","_city","_state","_zipcode","element","reset","cancel"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport logo from '../../Assets/images/logo.png'\nimport cancelButton from '../../Assets/images/cross.png'\nimport './Adduser.css';\nimport axios from 'axios'\nimport { useHistory } from \"react-router-dom\";\nimport {Link} from 'react-router-dom';\n// import { FullName, Zipcode, PhoneNumber } from './Regex';\n\nconst AddUser = () => {\n  let history = useHistory();\n  const [user, setUser] = useState({\n    name: '',\n        FullName: '',\n        Zipcode: '',\n        PhoneNumber: '',\n        address: '',\n        city: '',\n        state:'',\n        zipcode:'',\n        phonenumber:'',\n        id: '',\n        isUpdate: false,\n         error: {\n        FullName: '',\n        Zipcode: '',\n        PhoneNumber: '',\n        address: '',\n        city: '',\n        state:'',\n        zipcode:'',\n        phonenumber:'',\n        }\n  });\n\n  function validateInputs() {\n    const name = document.querySelector('#name');\n    const phone = document.querySelector('#phone');\n    const address = document.querySelector('#address');\n    const nameError = document.querySelector('.error-name');\n    const phoneError = document.querySelector('.error-phone');\n    const addressError = document.querySelector('.error-address');\n\n    name.addEventListener('input', function () {\n        try {\n            let personData = new AddressBook();\n            personData.name = name.value;\n            nameError.textContent = \"\";\n        } catch (e) {\n            nameError.textContent = e;\n        }\n    });\n\n    phone.addEventListener('input', function () {\n        try {\n            let personData = new AddressBook();\n            personData.phone = phone.value;\n            phoneError.textContent = \"\";\n        } catch (e) {\n            phoneError.textContent = e;\n        }\n    });\n\n    address.addEventListener('input', function () {\n        try {\n            let personData = new AddressBook();\n            personData.address = address.value;\n            addressError.textContent = \"\";\n        } catch (e) {\n            addressError.textContent = e;\n        }\n    });\n}\n\n//Save\nconst save = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    let addressBook = createAddressBook();\n    //alert(JSON.stringify(addressBook));\n    addAndUpdateLocalStorage(addressBook); //Data store in local storage\n    alert(\"You are added successfully \" + addressBook._name);\n    window.location.replace(site_properties.home);\n}\n\nconst createAddressBook = () => {\n    let addressBook = new AddressBook();\n    addressBook.name = getInputValueId(\"#name\");\n    addressBook.phone = getInputValueId(\"#phone\");\n    addressBook.address = getInputValueId(\"#address\");\n    addressBook.city = getInputValueId(\"#city\");\n    addressBook.state = getInputValueId(\"#state\");\n    addressBook.zipcode = getInputValueId(\"#zipcode\");\n    //addressBook.id = new Date().getTime() + 1;\n    addressBook.id = addressBookObject._id;\n    return addressBook;\n}\n\nconst getInputValueId = (id) => {\n    return document.querySelector(id).value;\n}\n\n//Create a new person id\nconst createNewPersonId = () => {\n    let personId = localStorage.getItem('personId');\n    personId = !personId ? 1 : (parseInt(personId) + 1).toString();\n    localStorage.setItem('personId', personId);\n    return personId;\n}\n\n//Data store in local storage\nconst addAndUpdateLocalStorage = (data) => {\n    let personList = JSON.parse(localStorage.getItem(\"AddressBookList\"));\n    if (personList) {\n        let existingPersonData = personList.find(personData => personData._id == data.id);\n        if (!existingPersonData) {\n            data.id = createNewPersonId();\n            personList.push(data);\n        } else {\n            const index = personList.map(person => person._id).indexOf(data.id); //Get index of that array using map andindexOf\n            personList.splice(index, 1, data); //Remove person from the list\n        }\n    } else {\n        data.id = createNewPersonId();\n        personList = [data];\n    }\n    localStorage.setItem('AddressBookList', JSON.stringify(personList));\n}\n\n//Data shows in form form local storage for updating data\nconst editForm = () => {\n    let jsonData = localStorage.getItem('edit-person');\n    isUpdate = jsonData ? true : false;\n    if (!isUpdate)\n        return;\n    addressBookObject = JSON.parse(jsonData);\n    setForm();\n}\n\nconst setForm = () => {\n    setValue('#name', addressBookObject._name);\n    setValue('#phone', addressBookObject._phone);\n    setValue('#address', addressBookObject._address);\n    setValue('#city', addressBookObject._city);\n    setValue('#state', addressBookObject._state);\n    setValue('#zipcode', addressBookObject._zipcode);\n}\n\nconst setValue = (id, value) => {\n    let element = document.querySelector(id);\n    element.value = value;\n}\n\n//Reset\nconst reset = () => {\n    alert(\"Reset\");\n}\n\n//Cancel\nconst cancel = () => {\n    window.location.replace(site_properties.home);\n}\n\n}"]},"metadata":{},"sourceType":"module"}